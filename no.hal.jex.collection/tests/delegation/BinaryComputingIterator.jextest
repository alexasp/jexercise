import java.util.Iterator

test delegation.BinaryComputingIterator

instance Iterator<Double> iterator1 = newArrayList(0.5, -2.0).iterator
instance Iterator<Double> iterator2 = newArrayList(5.0, 3.0).iterator
instance Iterator<Double> iteratorShort = newArrayList(5.0).iterator

instance Iterator<Double> iteratorEmpty1 = newArrayList().iterator
instance Iterator<Double> iteratorEmpty2 = newArrayList().iterator

instance double epsilon = 0.000001d


sequence computeResultsMultiplication "BinaryOperator som multipliserer" {
	instance binaryIterator = new BinaryComputingIterator(iterator1, iterator2,  [x, y | x * y] )
	"Henter verdi" -- approximatelyEquals(binaryIterator.next, 2.5, epsilon) == true -->
	state{ binaryIterator.hasNext }
	"Henter verdi" -- approximatelyEquals(binaryIterator.next, -6.0, epsilon) == true -->
	state{ ! binaryIterator.hasNext }
}

sequence computeResultsAddition "BinaryOperator som adderer"{
	instance binaryIterator = new BinaryComputingIterator(iterator1, iterator2,  [x, y | x + y] )
	"Henter verdi" -- approximatelyEquals(binaryIterator.next, 5.5, epsilon) == true -->
	state{ binaryIterator.hasNext }
	"Henter verdi" -- approximatelyEquals(binaryIterator.next, 1.0, epsilon) == true -->
	state{ ! binaryIterator.hasNext }
}

sequence computeResultsWithShortIterator "Multiplisering med ujevnt antall verdier i interne iteratorer"{
	instance binaryIterator = new BinaryComputingIterator(iterator1, iteratorShort,  [x, y | x * y] )
	"Henter verdi" -- approximatelyEquals(binaryIterator.next, 2.5, epsilon) == true -->
	state{ ! binaryIterator.hasNext }
}

sequence computeResultsWithEmptyIterator "Multiplisering med tomme interne iteratorer"{
	instance binaryIterator = new BinaryComputingIterator(iteratorEmpty1, iteratorEmpty2,  [x, y | x * y] )
	-->
	state{ ! binaryIterator.hasNext }
}

method boolean approximatelyEquals(double first, double second, double epsilon){
	return first - epsilon < second && first + epsilon > second;
}